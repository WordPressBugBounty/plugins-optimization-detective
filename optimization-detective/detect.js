const win=window,doc=win.document,consoleLogPrefix="[Optimization Detective]",storageLockTimeSessionKey="odStorageLockTime";function isStorageLocked(e,t){if(0===t)return!1;try{const o=parseInt(sessionStorage.getItem(storageLockTimeSessionKey));return!isNaN(o)&&e<o+1e3*t}catch(e){return!1}}function setStorageLock(e){try{sessionStorage.setItem(storageLockTimeSessionKey,String(e))}catch(e){}}function log(...e){console.log(consoleLogPrefix,...e)}function warn(...e){console.warn(consoleLogPrefix,...e)}function error(...e){console.error(consoleLogPrefix,...e)}function isViewportNeeded(e,t){let o=!1;for(const{minimumViewportWidth:n,complete:i}of t){if(!(e>=n))break;o=!i}return o}function getCurrentTime(){return Date.now()}export default async function detect({serveTime:e,detectionTimeWindow:t,minViewportAspectRatio:o,maxViewportAspectRatio:n,isDebug:i,restApiEndpoint:r,restApiNonce:s,currentUrl:c,urlMetricsSlug:a,urlMetricsNonce:d,urlMetricsGroupStatuses:l,storageLockTTL:u,webVitalsLibrarySrc:g,urlMetricsGroupCollection:w}){const p=getCurrentTime();if(i&&log("Stored URL metrics group collection:",w),p-e>t)return void(i&&warn("Aborted detection due to being outside detection time window."));if(!isViewportNeeded(win.innerWidth,l))return void(i&&log("No need for URL metrics from the current viewport."));const m=win.innerWidth/win.innerHeight;if(m<o||m>n)return void(i&&warn(`Viewport aspect ratio (${m}) is not in the accepted range of ${o} to ${n}.`));if(await new Promise((e=>{"loading"!==doc.readyState?e():doc.addEventListener("DOMContentLoaded",e,{once:!0})})),await new Promise((e=>{"complete"===doc.readyState?e():win.addEventListener("load",e,{once:!0})})),"function"==typeof requestIdleCallback&&await new Promise((e=>{requestIdleCallback(e)})),isStorageLocked(p,u))return void(i&&warn("Aborted detection due to storage being locked."));if(doc.documentElement.scrollTop>0)return void(i&&warn("Aborted detection since initial scroll position of page is not at the top."));i&&log("Proceeding with detection");const f=doc.body.querySelectorAll("[data-od-xpath]"),h=new Map([...f].map((e=>[e,e.dataset.odXpath]))),L=[];let S;function b(){S instanceof IntersectionObserver&&(S.disconnect(),win.removeEventListener("scroll",b))}h.size>0&&(await new Promise((e=>{S=new IntersectionObserver((t=>{for(const e of t)L.push(e);e()}),{root:null,threshold:0});for(const e of h.keys())S.observe(e)})),win.addEventListener("scroll",b,{once:!0,passive:!0}));const{onLCP:v}=await import(g),y=[];await new Promise((e=>{v((t=>{y.push(t),e()}),{reportAllChanges:!0})})),b(),i&&log("Detection is stopping.");const P={url:c,slug:a,nonce:d,viewport:{width:win.innerWidth,height:win.innerHeight},elements:[]},C=y.at(-1);for(const e of L){const t=h.get(e.target);if(!t){i&&error("Unable to look up XPath for element");continue}const o={isLCP:e.target===C?.entries[0]?.element,isLCPCandidate:!!y.find((t=>t.entries[0]?.element===e.target)),xpath:t,intersectionRatio:e.intersectionRatio,intersectionRect:e.intersectionRect,boundingClientRect:e.boundingClientRect};P.elements.push(o)}i&&log("Current URL metrics:",P),await new Promise((e=>{setTimeout(e,0)}));try{const e=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json","X-WP-Nonce":s},body:JSON.stringify(P)});if(200===e.status&&setStorageLock(getCurrentTime()),i){const t=await e.json();200===e.status?log("Response:",t):error("Failure:",t)}}catch(e){i&&error(e)}h.clear()}